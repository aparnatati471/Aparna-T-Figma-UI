//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `ViewController`, and contains static references to 2 segues.
    struct viewController {
      /// Segue identifier `SignInVC`.
      static let signInVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ViewController, SignInVC> = Rswift.StoryboardSegueIdentifier(identifier: "SignInVC")
      /// Segue identifier `SignUpVC`.
      static let signUpVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ViewController, SignUpVC> = Rswift.StoryboardSegueIdentifier(identifier: "SignUpVC")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `SignInVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func signInVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ViewController, SignInVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.viewController.signInVC, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `SignUpVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func signUpVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ViewController, SignUpVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.viewController.signUpVC, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Onboarding`.
    static let onboarding = _R.storyboard.onboarding()
    /// Storyboard `ProfileScreen`.
    static let profileScreen = _R.storyboard.profileScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Onboarding", bundle: ...)`
    static func onboarding(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.onboarding)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ProfileScreen", bundle: ...)`
    static func profileScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profileScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 11 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `ButtonBackgroundColor`.
    static let buttonBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ButtonBackgroundColor")
    /// Color `HeaderColor`.
    static let headerColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "HeaderColor")
    /// Color `HeaderSubTitleColor`.
    static let headerSubTitleColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "HeaderSubTitleColor")
    /// Color `IndicatorColor`.
    static let indicatorColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "IndicatorColor")
    /// Color `LabelTextColor`.
    static let labelTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "LabelTextColor")
    /// Color `MainViewBackgroundColor`.
    static let mainViewBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "MainViewBackgroundColor")
    /// Color `PlaceHolderColor`.
    static let placeHolderColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "PlaceHolderColor")
    /// Color `Red`.
    static let red = Rswift.ColorResource(bundle: R.hostingBundle, name: "Red")
    /// Color `TextFieldBackgroundColor`.
    static let textFieldBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextFieldBackgroundColor")
    /// Color `TextFieldBorderColor`.
    static let textFieldBorderColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextFieldBorderColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ButtonBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "HeaderColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func headerColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.headerColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "HeaderSubTitleColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func headerSubTitleColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.headerSubTitleColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "IndicatorColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func indicatorColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.indicatorColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LabelTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func labelTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.labelTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "MainViewBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainViewBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainViewBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PlaceHolderColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func placeHolderColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.placeHolderColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextFieldBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextFieldBorderColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldBorderColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldBorderColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ButtonBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonBackgroundColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonBackgroundColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "HeaderColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func headerColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.headerColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "HeaderSubTitleColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func headerSubTitleColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.headerSubTitleColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "IndicatorColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func indicatorColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.indicatorColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LabelTextColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func labelTextColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.labelTextColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "MainViewBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mainViewBackgroundColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainViewBackgroundColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PlaceHolderColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func placeHolderColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.placeHolderColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Red", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func red(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.red.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TextFieldBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textFieldBackgroundColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textFieldBackgroundColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TextFieldBorderColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textFieldBorderColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textFieldBorderColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 6 files.
  struct file {
    /// Resource file `ReadexPro-Bold.ttf`.
    static let readexProBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "ReadexPro-Bold", pathExtension: "ttf")
    /// Resource file `ReadexPro-ExtraLight.ttf`.
    static let readexProExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "ReadexPro-ExtraLight", pathExtension: "ttf")
    /// Resource file `ReadexPro-Light.ttf`.
    static let readexProLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "ReadexPro-Light", pathExtension: "ttf")
    /// Resource file `ReadexPro-Medium.ttf`.
    static let readexProMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "ReadexPro-Medium", pathExtension: "ttf")
    /// Resource file `ReadexPro-Regular.ttf`.
    static let readexProRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "ReadexPro-Regular", pathExtension: "ttf")
    /// Resource file `ReadexPro-SemiBold.ttf`.
    static let readexProSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "ReadexPro-SemiBold", pathExtension: "ttf")

    /// `bundle.url(forResource: "ReadexPro-Bold", withExtension: "ttf")`
    static func readexProBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readexProBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ReadexPro-ExtraLight", withExtension: "ttf")`
    static func readexProExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readexProExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ReadexPro-Light", withExtension: "ttf")`
    static func readexProLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readexProLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ReadexPro-Medium", withExtension: "ttf")`
    static func readexProMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readexProMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ReadexPro-Regular", withExtension: "ttf")`
    static func readexProRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readexProRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ReadexPro-SemiBold", withExtension: "ttf")`
    static func readexProSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readexProSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 6 fonts.
  struct font: Rswift.Validatable {
    /// Font `ReadexPro-Bold`.
    static let readexProBold = Rswift.FontResource(fontName: "ReadexPro-Bold")
    /// Font `ReadexPro-ExtraLight`.
    static let readexProExtraLight = Rswift.FontResource(fontName: "ReadexPro-ExtraLight")
    /// Font `ReadexPro-Light`.
    static let readexProLight = Rswift.FontResource(fontName: "ReadexPro-Light")
    /// Font `ReadexPro-Medium`.
    static let readexProMedium = Rswift.FontResource(fontName: "ReadexPro-Medium")
    /// Font `ReadexPro-Regular`.
    static let readexProRegular = Rswift.FontResource(fontName: "ReadexPro-Regular")
    /// Font `ReadexPro-SemiBold`.
    static let readexProSemiBold = Rswift.FontResource(fontName: "ReadexPro-SemiBold")

    /// `UIFont(name: "ReadexPro-Bold", size: ...)`
    static func readexProBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: readexProBold, size: size)
    }

    /// `UIFont(name: "ReadexPro-ExtraLight", size: ...)`
    static func readexProExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: readexProExtraLight, size: size)
    }

    /// `UIFont(name: "ReadexPro-Light", size: ...)`
    static func readexProLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: readexProLight, size: size)
    }

    /// `UIFont(name: "ReadexPro-Medium", size: ...)`
    static func readexProMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: readexProMedium, size: size)
    }

    /// `UIFont(name: "ReadexPro-Regular", size: ...)`
    static func readexProRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: readexProRegular, size: size)
    }

    /// `UIFont(name: "ReadexPro-SemiBold", size: ...)`
    static func readexProSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: readexProSemiBold, size: size)
    }

    static func validate() throws {
      if R.font.readexProBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ReadexPro-Bold' could not be loaded, is 'ReadexPro-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.readexProExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ReadexPro-ExtraLight' could not be loaded, is 'ReadexPro-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.readexProLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ReadexPro-Light' could not be loaded, is 'ReadexPro-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.readexProMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ReadexPro-Medium' could not be loaded, is 'ReadexPro-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.readexProRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ReadexPro-Regular' could not be loaded, is 'ReadexPro-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.readexProSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ReadexPro-SemiBold' could not be loaded, is 'ReadexPro-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 16 images.
  struct image {
    /// Image `BackArrow`.
    static let backArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackArrow")
    /// Image `Chat`.
    static let chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "Chat")
    /// Image `Edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "Edit")
    /// Image `Favourites`.
    static let favourites = Rswift.ImageResource(bundle: R.hostingBundle, name: "Favourites")
    /// Image `Files`.
    static let files = Rswift.ImageResource(bundle: R.hostingBundle, name: "Files")
    /// Image `ImageOne`.
    static let imageOne = Rswift.ImageResource(bundle: R.hostingBundle, name: "ImageOne")
    /// Image `ImageTwo`.
    static let imageTwo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ImageTwo")
    /// Image `Location`.
    static let location = Rswift.ImageResource(bundle: R.hostingBundle, name: "Location")
    /// Image `Lock`.
    static let lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "Lock")
    /// Image `Login`.
    static let login = Rswift.ImageResource(bundle: R.hostingBundle, name: "Login")
    /// Image `Profile Picture`.
    static let profilePicture = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profile Picture")
    /// Image `RightArrow`.
    static let rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "RightArrow")
    /// Image `appleIcon`.
    static let appleIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "appleIcon")
    /// Image `eyeIcon`.
    static let eyeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyeIcon")
    /// Image `googleIcon`.
    static let googleIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "googleIcon")
    /// Image `profileImage`.
    static let profileImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileImage")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BackArrow", bundle: ..., traitCollection: ...)`
    static func backArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Chat", bundle: ..., traitCollection: ...)`
    static func chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Favourites", bundle: ..., traitCollection: ...)`
    static func favourites(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favourites, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Files", bundle: ..., traitCollection: ...)`
    static func files(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.files, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ImageOne", bundle: ..., traitCollection: ...)`
    static func imageOne(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageOne, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ImageTwo", bundle: ..., traitCollection: ...)`
    static func imageTwo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageTwo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Location", bundle: ..., traitCollection: ...)`
    static func location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Lock", bundle: ..., traitCollection: ...)`
    static func lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Login", bundle: ..., traitCollection: ...)`
    static func login(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Profile Picture", bundle: ..., traitCollection: ...)`
    static func profilePicture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profilePicture, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RightArrow", bundle: ..., traitCollection: ...)`
    static func rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "appleIcon", bundle: ..., traitCollection: ...)`
    static func appleIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appleIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyeIcon", bundle: ..., traitCollection: ...)`
    static func eyeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyeIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "googleIcon", bundle: ..., traitCollection: ...)`
    static func googleIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googleIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profileImage", bundle: ..., traitCollection: ...)`
    static func profileImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileImage, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ProfileCell`.
    static let profileCell: Rswift.ReuseIdentifier<ProfileCell> = Rswift.ReuseIdentifier(identifier: "ProfileCell")
    /// Reuse identifier `onboardingCell`.
    static let onboardingCell: Rswift.ReuseIdentifier<OnboardingCell> = Rswift.ReuseIdentifier(identifier: "onboardingCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 15 localization keys.
    struct localizable {
      /// Value: A holiday classic, our Peppermint Mocha infuses hand-pulled espresso with rich chocolate sauce, sweet peppermint, topped with a cloud of whipped cream.
      static let subtitleOne = Rswift.StringResource(key: "SubtitleOne", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Addresses
      static let address = Rswift.StringResource(key: "Address", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Button Clicked
      static let buttonClick = Rswift.StringResource(key: "buttonClick", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Chai Latte
      static let titleTwo = Rswift.StringResource(key: "TitleTwo", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm
      static let signUpButtonTitle = Rswift.StringResource(key: "signUpButtonTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Contact Us
      static let contact = Rswift.StringResource(key: "Contact", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Favourite Products
      static let favourites = Rswift.StringResource(key: "Favourites", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hello
      static let appName = Rswift.StringResource(key: "appName", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Main
      static let main = Rswift.StringResource(key: "Main", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Onboarding
      static let onboard = Rswift.StringResource(key: "Onboard", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Our Masala Chai latte is Peets take on a traditional Indian cup. Our own blend of teas and spices, lightly sweetened, with steamed milk.
      static let subtitleTwo = Rswift.StringResource(key: "SubtitleTwo", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Payment Methods
      static let payment = Rswift.StringResource(key: "Payment", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Peppermint Mocha
      static let titleOne = Rswift.StringResource(key: "TitleOne", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Previous Orders
      static let orders = Rswift.StringResource(key: "Orders", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sign in
      static let signInButtonTitle = Rswift.StringResource(key: "signInButtonTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: A holiday classic, our Peppermint Mocha infuses hand-pulled espresso with rich chocolate sauce, sweet peppermint, topped with a cloud of whipped cream.
      static func subtitleOne(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SubtitleOne", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SubtitleOne"
        }

        return NSLocalizedString("SubtitleOne", bundle: bundle, comment: "")
      }

      /// Value: Addresses
      static func address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Address"
        }

        return NSLocalizedString("Address", bundle: bundle, comment: "")
      }

      /// Value: Button Clicked
      static func buttonClick(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("buttonClick", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "buttonClick"
        }

        return NSLocalizedString("buttonClick", bundle: bundle, comment: "")
      }

      /// Value: Chai Latte
      static func titleTwo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TitleTwo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TitleTwo"
        }

        return NSLocalizedString("TitleTwo", bundle: bundle, comment: "")
      }

      /// Value: Confirm
      static func signUpButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUpButtonTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signUpButtonTitle"
        }

        return NSLocalizedString("signUpButtonTitle", bundle: bundle, comment: "")
      }

      /// Value: Contact Us
      static func contact(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Contact", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Contact"
        }

        return NSLocalizedString("Contact", bundle: bundle, comment: "")
      }

      /// Value: Favourite Products
      static func favourites(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Favourites", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Favourites"
        }

        return NSLocalizedString("Favourites", bundle: bundle, comment: "")
      }

      /// Value: Hello
      static func appName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("appName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "appName"
        }

        return NSLocalizedString("appName", bundle: bundle, comment: "")
      }

      /// Value: Main
      static func main(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Main"
        }

        return NSLocalizedString("Main", bundle: bundle, comment: "")
      }

      /// Value: Onboarding
      static func onboard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Onboard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Onboard"
        }

        return NSLocalizedString("Onboard", bundle: bundle, comment: "")
      }

      /// Value: Our Masala Chai latte is Peets take on a traditional Indian cup. Our own blend of teas and spices, lightly sweetened, with steamed milk.
      static func subtitleTwo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SubtitleTwo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SubtitleTwo"
        }

        return NSLocalizedString("SubtitleTwo", bundle: bundle, comment: "")
      }

      /// Value: Payment Methods
      static func payment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Payment"
        }

        return NSLocalizedString("Payment", bundle: bundle, comment: "")
      }

      /// Value: Peppermint Mocha
      static func titleOne(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TitleOne", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TitleOne"
        }

        return NSLocalizedString("TitleOne", bundle: bundle, comment: "")
      }

      /// Value: Previous Orders
      static func orders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Orders", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Orders"
        }

        return NSLocalizedString("Orders", bundle: bundle, comment: "")
      }

      /// Value: Sign in
      static func signInButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signInButtonTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signInButtonTitle"
        }

        return NSLocalizedString("signInButtonTitle", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try onboarding.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profileScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController

      let bundle = R.hostingBundle
      let name = "Main"
      let viewController = StoryboardViewControllerResource<ViewController>(identifier: "ViewController")

      func viewController(_: Void = ()) -> ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: viewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appleIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appleIcon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "googleIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'googleIcon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profileImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profileImage' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "PlaceHolderColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'PlaceHolderColor' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().viewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'viewController' could not be loaded from storyboard 'Main' as 'ViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct onboarding: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Onboarding"
      let onboardingVC = StoryboardViewControllerResource<OnboardingVC>(identifier: "OnboardingVC")

      func onboardingVC(_: Void = ()) -> OnboardingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onboardingVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "IndicatorColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'IndicatorColor' is used in storyboard 'Onboarding', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LabelTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LabelTextColor' is used in storyboard 'Onboarding', but couldn't be loaded.") }
          if UIKit.UIColor(named: "MainViewBackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainViewBackgroundColor' is used in storyboard 'Onboarding', but couldn't be loaded.") }
        }
        if _R.storyboard.onboarding().onboardingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onboardingVC' could not be loaded from storyboard 'Onboarding' as 'OnboardingVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profileScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "ProfileScreen"
      let profileVC = StoryboardViewControllerResource<ProfileVC>(identifier: "ProfileVC")

      func profileVC(_: Void = ()) -> ProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Edit' is used in storyboard 'ProfileScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Location' is used in storyboard 'ProfileScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "RightArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RightArrow' is used in storyboard 'ProfileScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profileImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profileImage' is used in storyboard 'ProfileScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AccentColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AccentColor' is used in storyboard 'ProfileScreen', but couldn't be loaded.") }
          if UIKit.UIColor(named: "HeaderColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'HeaderColor' is used in storyboard 'ProfileScreen', but couldn't be loaded.") }
          if UIKit.UIColor(named: "MainViewBackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MainViewBackgroundColor' is used in storyboard 'ProfileScreen', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Red' is used in storyboard 'ProfileScreen', but couldn't be loaded.") }
        }
        if _R.storyboard.profileScreen().profileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileVC' could not be loaded from storyboard 'ProfileScreen' as 'ProfileVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
